create table plans(
plan_id number ,
plan_amount number not null,
plan_duration number not null,
no_of_screens number not null,
discount_amount number default 0,

constraint plan_id_uqi primary key (plan_id),
constraint plan_amount_cr check(plan_amount>=0),
constraint plan_duration_cr check(plan_duration>=30),
constraint no_of_screens_cr check (no_of_screens>=1)
);--1

create table user_credits
(
customer_name VARCHAR2(80),
gender char(2),
DOB date ,
age number ,
mail_id varchar2(50)not null,
user_id number,
passwords varchar2(30) not null,
mobile_no number,
created_date  timestamp default systimestamp,


constraint mail_id_pfg primary key(mail_id),
constraint gender_cak check(gender in('M','F')),
--constraint unique_uqq unique(user_id,mobile_no),
constraint age_cuk check(age >= 10),
constraint passwords check(length(passwords)>=8),
constraint mobile_cdfk check (length(mobile_no)=10)
);--2


create table categorys(
category_id number,
category_name varchar2(10) not null,
constraint category_id_pk primary key(category_id)
--constraint category_name_ck check(category_name in ('TVShows','Movies','Kids')),
--constraint category_un unique(category_id,category_name)
);--3

create table prime_releases(
prime_id number,
category_id number not null,
name_of_video varchar2(100) not null,
genre varchar2(20) not null,
season number default 0,
total_episodes number default 0,
audio_languages varchar2(50) not null,
subtitle_languages varchar2(50),
director varchar2(50),
release_date date,
prime_release_date date,
box_office_collection_millions number,
casting varchar2(100),
description_of_video varchar2(1000),
imdb_rating number,
originals number,
tlikes  number,
tdislikes number,
tviewer_rating number,

constraint prime_id_pk primary key(prime_id),
constraint category_id_fk foreign key (category_id) references categorys(category_id),
constraint genre_ck check (genre in ('Short','Drama','Comedy','Documentary','Animation','Thriller','Horror','Romance','Fantasy','Family','Sci-Fi','Action','Music','Mystery','Crime','Adventure','Biography','History','Western','Musical','Sport','War','News','TalkShow','GameShow')), 
constraint languages_ck check (audio_languages in ('English','Tamil','Hindi','Telungu','Malayalam','kannadam','Bengali','chinese','spanish')),
constraint subtitle_languages_ck check (subtitle_languages in ('English','Tamil','Hindi','Telungu','Malayalam','kannadam','Bengali','chinese','spanish')),
constraint unique_id_lk unique (prime_id,name_of_video,audio_languages)
);--4

create table watch_lists(
mail_id varchar2(50) not null,
prime_id number not null,
watched number default 0,
watch_later number default 0,
watch_later_date TIMESTAMP,
likes number default 0,
dislikes number default 0,
viewer_rating number default 0,

constraint mail_id_fkjg foreign key (mail_id) references user_credits(mail_id),
constraint prime_id_fdkg foreign key (prime_id) references prime_releases(prime_id),
constraint watch_later_chk check(watch_later in(0,1)),
constraint likes_cak check(likes in(0,1)),
constraint dislikes_cak check(dislikes in(0,1)),
constraint com_uniq unique(mail_id,prime_id),
constraint viewer_rating_cdk check(viewer_rating between 0 and 10));
--5


create or replace PROCEDURE VIEWER_REIVEW 
(
  I_MAIL_ID IN VARCHAR2 
, I_PRIME_ID IN NUMBER
, I_VIEWER_REVIEW IN NUMBER
) AS 
V_TREVIEWS NUMBER;
V_REVIEW NUMBER;
BEGIN
UPDATE watch_lists set viewer_rating = I_VIEWER_REVIEW WHERE mail_id = I_MAIL_ID and prime_id = I_PRIME_ID;
SELECT avg(viewer_rating) into V_REVIEW from watch_lists where prime_id = I_PRIME_ID and viewer_rating >0;
UPDATE prime_releases set tviewer_rating = v_REVIEW where prime_id = I_PRIME_ID;
END VIEWER_REIVEW;
--6

create or replace PROCEDURE LIKES 
(
  I_MAIL_ID IN VARCHAR2 
, I_PRIME_ID IN NUMBER 
) AS 
V_TEMP_LIKES NUMBER;
BEGIN
V_TEMP_LIKES :=FN_LIKES(I_MAIL_ID,I_PRIME_ID);
IF V_TEMP_LIKES = 1 THEN
    UPDATE watch_lists set likes = 1 where mail_id = I_MAIL_ID and prime_id = I_PRIME_ID;
    update prime_releases set tlikes = tlikes + 1 where prime_id = I_PRIME_ID;
ELSIF V_TEMP_LIKES = 2 THEN
     UPDATE watch_lists set likes = 0 where mail_id = I_MAIL_ID and prime_id = I_PRIME_ID; 
     update prime_releases set tlikes = tlikes - 1 where prime_id = I_PRIME_ID;
ELSIF V_TEMP_LIKES = 3 THEN
    UPDATE watch_lists set likes = 1 ,dislikes = 0 where mail_id = I_MAIL_ID and prime_id = I_PRIME_ID; 
    update prime_releases set tlikes = tlikes + 1,tdislikes = tdislikes - 1 where prime_id = I_PRIME_ID;
END IF;   
END LIKES;
--7

create or replace PROCEDURE DISLIKES 
(
  I_MAIL_ID IN VARCHAR2 
, I_PRIME_ID IN NUMBER 
)AS 
V_TEMP_DISLIKES NUMBER;
BEGIN
V_TEMP_DISLIKES :=FN_LIKES(I_MAIL_ID,I_PRIME_ID);
IF V_TEMP_DISLIKES = 1 THEN
    UPDATE watch_lists set dislikes = 1 where mail_id = I_MAIL_ID and prime_id = I_PRIME_ID;
    update prime_releases set tdislikes = tdislikes + 1 where prime_id = I_PRIME_ID;
ELSIF V_TEMP_DISLIKES = 2 THEN
    UPDATE watch_lists set likes = 0 ,dislikes = 1 where mail_id = I_MAIL_ID and prime_id = I_PRIME_ID; 
    update prime_releases set tlikes = tlikes - 1,tdislikes = tdislikes + 1 where prime_id = I_PRIME_ID;
ELSIF V_TEMP_DISLIKES = 3 THEN
     UPDATE watch_lists set dislikes = 0 where mail_id = I_MAIL_ID and prime_id = I_PRIME_ID; 
     update prime_releases set tdislikes = tdislikes - 1 where prime_id = I_PRIME_ID;
END IF; 
END DISLIKES;
--8